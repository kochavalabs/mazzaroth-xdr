version: 2.1

executors:
  node-latest:
    working_directory: ~/repo
    docker:
      - image: circleci/node:latest

jobs:
  test-gen:
    executor: node-latest
    steps:
      - checkout
      - run:
          name: get rust
          command: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
      - run:
          name: setup env
          command: echo "export PATH=$HOME/.cargo/bin:$PATH" >> $BASH_ENV
      - run:
          name: update rust dependencies if releasing
          command: |
            if [[ "$CIRCLE_BRANCH" =~ release/v.* ]]; then
              cargo install cargo-edit
              grep branch Cargo.toml | grep develop | awk '{print $1}' | xargs -I[] cargo add --allow-prerelease []
              sed -i 's/branch = "develop", //g' Cargo.toml
              export CARGO_VER=$(echo $CIRCLE_BRANCH | sed 's:release/v::')
              sed -i "s/^version.*/version = \"$CARGO_VER\"/" Cargo.toml
            fi
      - run:
          name: update js dependencies if releasing
          command: |
            if [[ "$CIRCLE_BRANCH" =~ release/v.* ]]; then
              sudo npm install -g kl-ci-tools
              kl-ci-tools deps | xargs -I[] npm install []@latest
              echo $CIRCLE_BRANCH | sed 's:release/::' | xargs npm --no-git-tag-version version
            fi
      - run:
          name: npm install
          command: npm install
      - run:
          name: clean
          command: rm -rf ./js/*
      - run:
          name: get deps
          command: npm run get-deps
      - run:
          name: build javascript
          command: npm run build-js
      - run:
          name: generate rust
          command: |
            rustup component add rustfmt
            npm run build-rust
      - run:
          name: build rust
          command: cargo build
      - run:
          name: verify no changes to generated files
          command: |
            if git status --short | grep generated; then
              echo "there were changes to generated files";
              exit 1;
            fi
      - save_cache:
          key: git-sha-{{ .Revision }}{{ .Branch }}
          paths:
            - node_modules
            - package.json
            - ./target
            - Cargo.toml

  publish-js-dev:
    executor: node-latest
    steps:
      - checkout
      - restore_cache:
          key: git-sha-{{ .Revision }}{{ .Branch }}
      - run:
          name: install ci tools
          command: sudo npm install -g kl-ci-tools
      - run:
          name: Set Develop Version
          command: git rev-parse develop | cut -c1-10 | xargs -I[] kl-ci-tools tag dev.[]
      - run:
          name: Authenticate with registry
          command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > .npmrc
      - run:
          name: Publish package
          command: npm publish --tag develop

  publish-latest:
    executor: node-latest
    steps:
      - checkout
      - restore_cache:
          key: git-sha-{{ .Revision }}{{ .Branch }}
      - run:
          name: install ci tools
          command: sudo npm install -g kl-ci-tools
      - run:
          name: get rust
          command: "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
      - run:
          name: setup env
          command: echo "export PATH=$HOME/.cargo/bin:$PATH" >> $BASH_ENV
      - run:
          name: setup cargo for deploy
          command: |
            rustup install stable
            rustup default stable
      - run:
          name: setup git config
          command: git config user.email "dev@mazzaroth.io" && git config user.name "CircleCI" && git config --global core.editor "\usr\local\bin\subl -n -w"
      - run:
          name: validate package.json
          command: kl-ci-tools validate
      - run:
          name: commit updates
          command: git add -A && git commit -m "Dependency/Version update for $CIRCLE_BRANCH"
      - run:
          name: update master
          command: git rebase -Xtheirs origin/master && git push origin $CIRCLE_BRANCH:master
      - run:
          name: authenticate with npm registry
          command: echo "//registry.npmjs.org/:_authToken=$npm_TOKEN" > .npmrc
      - run:
          name: publish npm package
          command: npm publish --tag latest
      - run:
          name: cargo login
          command: cargo login $cargo_TOKEN
      - run:
          name: cargo publish
          command: cargo publish
      - run:
          name: tag release
          command: |
            export GIT_TAG=$(echo $CIRCLE_BRANCH | sed 's:release/::')
            git checkout master
            git tag $GIT_TAG
            git push origin $GIT_TAG
      - run:
          name: checkout and develop
          command: git checkout develop
      - run:
          name: update develop version
          command: |
            export RELEASE_VERSION=$(echo $CIRCLE_BRANCH | sed 's:release/v::')
            xargs npm --no-git-tag-version version $RELEASE_VERSION
            sed -i "s/^version.*/version = \"$RELEASE_VERSION\"/" Cargo.toml
      - run:
          name: commit updates
          command: git add -A && git commit -m "Version update for $CIRCLE_BRANCH" && git push origin develop

workflows:
  version: 2
  build_test_release:
    jobs:
      - test-gen
      - publish-js-dev:
          requires:
            - test-gen
          filters:
            branches:
              only: develop
      - publish-latest:
          requires:
            - test-gen
          filters:
            branches:
              only: /release\/v([0-9]+)\.([0-9]+)\.([0-9]+)$/
